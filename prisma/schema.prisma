// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Year {
  id        Int        @id // number: YYYY
  months    Month[]
  dates     DateData[]
  updatedAt DateTime   @updatedAt
}

model Month {
  id         String     @id // string: YYYYmm
  index      Int
  name       String
  daysCount  Int
  weeksCount Int
  weekIndex  Int
  year       Year       @relation(fields: [yearId], references: [id])
  yearId     Int // number: YYYY (4)
  dates      DateData[]
  updatedAt  DateTime   @updatedAt

  @@unique([yearId, weekIndex], name: "weekOfYear")
}

model DateData {
  id         String   @id // string: YYYYmmdd (8)
  date       Int
  dayName    String
  dayIndex   Int
  weekIndex  Int
  monthIndex Int
  Month      Month    @relation(fields: [monthId], references: [id])
  monthId    String // string: YYYYmm (6)
  year       Year     @relation(fields: [yearId], references: [id])
  yearId     Int // number: YYYY (4)
  marks      Mark[]
  updatedAt  DateTime @updatedAt

  @@map("Date")
}

model Permission {
  id      String   @id @default(cuid())
  name    String   @unique
  value   String
  authors Config[] @relation(name: "author.permissions")
  groups  Config[] @relation(name: "group.permissions")
}

model Config {
  id     String       @id @default(cuid())
  mark   Mark         @relation(fields: [markId], references: [id])
  markId Int          @unique
  author Permission[] @relation(name: "author.permissions")
  group  Permission[] @relation(name: "group.permissions")
}

model Mark {
  id          Int      @id @default(autoincrement())
  type        String
  summary     String
  description String?
  image       String?
  startAt     Int? // Time: H:m:i -> to miliseconds
  endAt       Int? // Time: H:m:i -> to miliseconds
  date        DateData @relation(fields: [dateId], references: [id])
  dateId      String // string: YYYYmmdd (8)
  author      User?    @relation(fields: [authorId], references: [id])
  authorId    String?
  group       Group?   @relation(fields: [groupId], references: [id])
  groupId     String?
  config      Config?
  updatedAt   DateTime @updatedAt
}

model Group {
  id        String   @id @default(cuid())
  name      String
  members   User[]
  updatedAt DateTime @updatedAt
  marks     Mark[]
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  group         Group?    @relation(fields: [groupId], references: [id])
  groupId       String?
  Mark          Mark[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
